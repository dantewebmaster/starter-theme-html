/* below width media querie */ 
@mixin below($width) {
	@media screen and (max-width: $width) {
		@content;
	}
}

/* default pseudo style */ 
@mixin pseudo($display: block, $pos: absolute, $content: ''){
	content: $content;
	display: $display;
	position: $pos;
}

/* css triangle */ 
@mixin css-triangle($color, $direction, $size: 6px, $position: absolute, $round: false){
	@include pseudo($pos: $position);
	width: 0;
	height: 0;
	@if $round {
		border-radius: 3px;
	}
	@if $direction == down {
		border-left: $size solid transparent;
		border-right: $size solid transparent;
		border-top: $size solid $color;
		margin-top: 0 - round( $size / 2.5 );
	} @else if $direction == up {
		border-left: $size solid transparent;
		border-right: $size solid transparent;
		border-bottom: $size solid $color;
		margin-bottom: 0 - round( $size / 2.5 );
	} @else if $direction == right {
		border-top: $size solid transparent;
		border-bottom: $size solid transparent;
		border-left: $size solid $color;
		margin-right: -$size;
	} @else if  $direction == left {
		border-top: $size solid transparent;
		border-bottom: $size solid transparent;
		border-right: $size solid $color;
		margin-left: -$size;
	}
}

/* REM units with pixel fallback */
@mixin rem($property, $values...) {
	$n: length($values);
	$i: 1;
	
	$pxlist: ();
	$remlist: ();
	
	@while $i <= $n {
		$itemVal: (nth($values, $i));
		@if $itemVal != "auto"{
			$pxlist: append($pxlist, $itemVal + px);
			$remlist: append($remlist, ($itemVal / 10) + rem);
		}@else{
			$pxlist: append($pxlist, auto);
			$remlist: append($remlist, auto);
		}
		
		$i: $i + 1;
	}
	
	#{$property}: $pxlist;
	#{$property}: $remlist;
}

/* REM font-size with px fallback */ 
@mixin font-size($size) {
	font-size: $size; // Fallback in px.
	font-size: ($size / 16px) * 1rem;
}

/* Center block */
@mixin center-block {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

/* Clearfix */
@mixin clearfix() {
	&::after {
		display: block;
		content: "";
		clear: both;
	}
}

/* Soft transition elements */
@mixin soft-transition($delay: 0, $duration: 0.3s, $property: all, $time-function: ease-in-out) {
	transition: $property $duration $time-function;
	transition-delay: $delay;
}
